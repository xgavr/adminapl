<?php
    use Stock\Entity\Vtp;
    use Stock\Entity\VtpGood;
    
    $this->headTitle('Возврат товаров поставщику');

    $this->mainMenu()->setActiveItemId('raw');
    $this->mainMenu()->setActiveUrl($this->url('vtp'));

    $this->pageBreadcrumbs()->setItems([
                'Главная'=>$this->url('home'),
                'Возврат товаров поставщику'=>$this->url('vtp'),
                ]);


?>


<div class="row">
    <div class="col-md-12">
        <div id="toolbar">
            <div class="form-inline" role="form">
                <button class="btn btn-info base-search-modal" type="button" 
                        modal-url="/vtp/base-search" title="Добавить возврат">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                </button>                
                <div class="form-group">
                    <div class="btn-group">
                        <input name="search" style="width: 200px" class="form-control enter-search" type="text" placeholder="Артикул, сумма">
                        <span class="glyphicon glyphicon-remove-circle inputclear"></span>
                    </div>
                    <button id="ok" type="submit" class="btn btn-default" title="Поиск">
                        <span class="glyphicon glyphicon-search"></span>
                    </button>
                </div>
                <div class="form-group">
                    <select id="supplierSelect" style="width: 250px" class="form-control cookie-control">
                        <option selected>поставщик</option>
                        <?php foreach ($suppliers as $supplier):?>
                            <option value="<?= $supplier->getId()?>"><?= $supplier->getName()?></option>
                        <?php endforeach;?>
                    </select>
                    
                </div>    
                <div class="form-group">
                    <select id="officeSelect" style="width: 150px" class="form-control cookie-control">
                        <option selected>офис</option>
                        <?php foreach ($offices as $office):?>
                            <option value="<?= $office->getId()?>"><?= $office->getName()?></option>
                        <?php endforeach;?>
                    </select>
                    
                </div>    
                <div class="form-group">
                    <input id="monthSelect" class="form-control cookie-control" type="month" placeholder="Период" value="<?= date('Y-m');?>">
                </div>
                <div class="form-group">
                    <select id="statusDocSelect" style="width: 150px" class="form-control cookie-control">
                        <option selected>статус возврата</option>
                        <?php foreach (Vtp::getStatusDocList() as $key=>$value):?>
                            <option value="<?= $key?>"><?= $value?></option>
                        <?php endforeach;?>
                    </select>                    
                </div>    
                <div class="form-group">
                    <select id="statusSelect" style="width: 150px" class="form-control cookie-control">
                        <option selected>статус документа</option>
                        <?php foreach (Vtp::getStatusList() as $key=>$value):?>
                            <option value="<?= $key?>"><?= $value?></option>
                        <?php endforeach;?>
                    </select>                    
                </div>    
                <div class="form-group">
                    <select id="vtpTypeSelect" style="width: 150px" class="form-control cookie-control">
                        <option selected>тип возврата</option>
                        <?php foreach (Vtp::getVtpTypeList() as $key=>$value):?>
                            <option value="<?= $key?>"><?= $value?></option>
                        <?php endforeach;?>
                    </select>                    
                </div>    
            </div>
        </div>
        <table id="vtptable" 
            data-toggle="table" 
            data-cookie="true"
            data-cookie-id-table="vtpSaveId"
            data-cookie-expire="1m"
            data-side-pagination="server"
            data-pagination="true" 
            data-page-list="[5, 10, 20, 50]"
            data-toolbar="#toolbar"
            data-show-refresh="true"
            data-query-params="queryParams"
            data-sort-name="id"
            data-sort-order="desc"            
            data-response-handler="responseHandler"
            data-classes = "table table-bordered table-hover table-condensed"
            data-row-style="rowStyle"
            data-detail-view="true"
            data-unique-id="id"
            data-undefined-text=''
            data-editable-emptytext='    '
            data-editable-emptyclass='text-muted'
            data-show-columns="true"
            data-minimum-count-columns="3"
            data-show-export="true"
            >
            <thead>
                <tr>
                     <!--<th data-field="id" data-type="numeric" data-sortable="true" data-align="right">ID</th>-->
                     <th data-field="docDate" data-sortable="true" data-formatter="dateFormatter" data-width="80">Дата</th>
                     <th data-field="ptu.docDate" data-sortable="true" data-width="80" data-formatter="ptuDateFormatter">Дата поступления</th>
                     <th data-field="id" data-sortable="false" data-formatter="docNumFormatter">Номер</th>
                     <th data-field="info" data-sortable="false" data-width="120" data-formatter="infoFormatter">Артикул</th>
                     <!--<th data-field="aplId" data-type="numeric" data-align="right">AplId</th>-->
                     <th data-field='amount' data-sortable="true" data-align="right" data-width="20" data-formatter="amountFormatter">Сумма</th>
                     <th data-field='ptu.supplier.name' data-sortable="true" data-formatter="linkFormatter">Поставщик</th>
                     <!--<th data-field='ptu.contract.name' data-sortable="false">Договор</th>-->
                     <th data-field='ptu.office.name' data-sortable="false">Склад</th>
                     <th data-field='comment' data-sortable="false" data-editable="true" data-editable-type="textarea">Комментраий</th>
<!--                     <th data-field='status' data-sortable="false">П</th>
                     <th data-field='statusDoc' data-sortable="false">Т</th>
                     <th data-field='statusEx' data-sortable="false">О</th>-->
                     <th data-field="id1" data-formatter="printFormatter" data-width="15">Торг2</th>
                     <th data-field="id2" data-formatter="torg12Formatter" data-width="15">Торг12</th>
                     <th data-field="id3" data-formatter="updFormatter" data-width="15">УПД</th>
                     <th data-field="id4" data-formatter="activeFormatter" data-width="5" data-align="center"></th>
                 </tr>                
            </thead>
        </table>
    </div>
</div>    

<?php echo $this->partial('/stock/index/stock-partial', []); ?>

<script type="text/javascript">

    var $table = $('#vtptable');        
    var $ok = $('#ok');
    var curentRowIndex = -1;
    
    function setCurrentIndex(index){
        curentRowIndex = index;
    }
    
    function getCurrentIndex(){
        return curentRowIndex;
    }

    function refreshTable(){
        $table.bootstrapTable('refresh');
    }
    
    function setCookies(cookieKey){
        let expires = 30;
        $('.cookie-control').each(function () {
            Cookies.set(cookieKey+'_'+$(this).attr('id'), $(this).val(), { expires: expires});        
        });        
    }
    
    function getCookies(cookieKey){
        $('.cookie-control').each(function () {
            var cookieVal = Cookies.get(cookieKey+'_'+$(this).attr('id'));
            if (cookieVal !== undefined){
                $(this).val(cookieVal);                
            }
        });                        
        $table.bootstrapTable('refresh', {
            url: '/vtp/content'
        });
    }
    
    $table.bootstrapTable({
        onLoadSuccess: function (data){
            setCookies('vtpSaveId');
        },
        onExpandRow: function (index, row, $detail) {
            $detail.html('Идет загрузка...');
            $.ajax({
                type: "GET",
                url: "/vtp/good-content/"+row.id,
                success: function (result) {
                    $detail.html('<table id="detail'+index+'"></table>').find('table').bootstrapTable({
                        classes: 'table table-bordered table-hover table-condensed', 
                        rowStyle: vtpIndexTakeStyle,
                        editableUrl: "/vtp/vtp-good-editable/",
                        idField: "vtpId",
                        columns: [{
                            field: 'vtpg.good.code',
                            title: 'Артикул',
                            formatter: 'goodFormatter'
                        }, {
                            field: 'vtpg.good.producer.name',
                            title: 'Производитель'
                        }, {
                            field: 'quantity',
                            title: 'Количество',
                            width: 200,
                            align: 'right',
                            editable: true
                        }, {
                            field: 'price',
                            title: 'Цена',
                            width: 200,
                            align: 'right',
                            editable: true,
                        }, {
                            field: 'amount',
                            title: 'Сумма',
                            width: 200,
                            align: 'right',
                            formatter: "pgAmountFormatter"
                        }],
                        data: result,
                        onEditableSave: function(field, geRow, oldValue, $el){
                            $.ajax({
                                type: "GET",
                                url: "/vtp/info/"+row.id,
                                success: function(info){
//                                    $table.bootstrapTable('updateCell', {index: index, field: 'amount', value: info.amount, reinit: true});
//                                    $table.bootstrapTable('collapseRowByUniqueId', index);
//                                    $table.bootstrapTable('expandRowByUniqueId', index);
                                }
                            });
                        }                        
                    });
                }    
            });
        }
    });
    
    $(function () {
        getCookies('vtpSaveId');
        
        $(document).on('change', '#statusDocSelect', function (e) {
            refreshTable();
        });
        $(document).on('change', '#statusSelect', function (e) {
            refreshTable();
        });
        $(document).on('change', '#vtpTypeSelect', function (e) {
            refreshTable();
        });
        $(document).on('editable-save.bs.table', '#vtptable', function (e, field, row, old, $el) {
            if (field == 'comment'){
                changeComment(row.id, row.comment);
            }
        });        

        $(document).on('click', '.base-search-modal', function (e) {
            var url = $(this).attr('modal-url');
            showFormDialog({
                id: 'baseSearchModal',
                url: url,
                width: '1000px',
                zIndex: 7770
            });
        });  
    });
    
    function queryParams(params) {
        $('#toolbar').find('input[name]').each(function () {
            params[$(this).attr('name')] = $(this).val();
        });
        limit = $('#vtptable .page-size').html();
        if (limit){
            params.limit = limit;
        }    
        offset = $('#vtptable li.page-number.active a').html();
        if (offset){
            params.offset = params.limit * (offset - 1);
        }    
        params.supplier = $('#supplierSelect').val();
        params.office = $('#officeSelect').val();
        params.month = $('#monthSelect').val();
        params.statusDoc = $('#statusDocSelect').val();
        params.status = $('#statusSelect').val();
        params.vtpType = $('#vtpTypeSelect').val();
        
        return params;
    }
    
    /**
     * Разность дат
     * @param {string} ptuDate 
     * @returns bool
     */
    function dateDiff(ptuDate){
        var today = Date.now();
        var parseDate = Date.parse(ptuDate);
        var oneDay=1000*60*60*24;
        return Math.floor((today-parseDate)/oneDay);
    }
    
    function rowStyle(row){
        var retired = 'tablerow';
        if (row.status === '<?= Vtp::STATUS_RETIRED?>'){
           retired += ' retired';
//           return {classes: retired};
        }
        if (row.statusAccount === '<?= Vtp::STATUS_TAKE_NO?>'){
           retired += ' warning';
           return {classes: retired};
        }
        switch(row.statusDoc){
            case '<?= Vtp::STATUS_DOC_NOT_RECD?>': 
                        return {classes: 'success '+retired}; break;
            case '<?= Vtp::STATUS_DOC_RECD?>': 
                        return {classes: 'info '+retired}; break;
                default:break;     
        }
        
        return {classes: retired};
    }
    
    function vtpIndexTakeStyle(row){
        var classes = 'default';
        if (row.vtpg.take === "<?= VtpGood::TAKE_NO?>"){
            classes = 'warning';
        }        
        return {classes: classes};
    }    
        
    function linkFormatter(value, row){
        if (!value){
            value = '---';
        }
        return [
            '<div class="pull-left">',
            '<a href="/producer/view/' + row.id + '" target="_blank">' + value + '</a>',
            '</div>'
        ].join(''); 
    }    
    
    function amountFormatter(value){
        return (Math.round(value*100)/100).toFixed(2);
    }    
    
    function pgAmountFormatter(value, row){
        var result = 0;
        if (row.price){
            result = row.price.toString().replace(',', '.');
        }    
        var total = (Math.round(result*row.quantity*100)/100).toFixed(2);
        return total;
    }        


    function docNumFormatter(value, row){
        if (row.aplId > 0){
            return '<nobr>'+value+' ('+row.aplId+')</nobr>';
        }
        return value;
    }    
    
    function activeFormatter(value, row){
        var url = '/vtp/edit-form/'+row.id;
        btn = '<button';
        btn += ' type="button"';
        btn += ' class="btn btn-default btn-xs vtp-modal-show"';
        btn += ' aria-label="Left Align"'; 
        btn += ' modal-url="'+url+'">';
        btn += '<span class="glyphicon glyphicon-edit" aria-hidden="true"></span>';
        btn += '</button>';

        return btn;
    }    
    
    function printFormatter(value, row){

        var url = '/print/vtp-torg2/'+row.id;
        btn = '<nobr><a href="'+url+'" target="_blank">pdf</a>';
        url = '/print/vtp-torg2/'+row.id+'?ext=Xls';
        btn += ' <a href="'+url+'" target="_blank">xls</a></nobr>';
        return btn;
    }    
    
    function updFormatter(value, row){

        var url = '/print/vtp-upd/'+row.id;
        btn = '<nobr><a href="'+url+'" target="_blank">pdf</a>';
        url = '/print/vtp-upd/'+row.id+'?ext=Xls';
        btn += ' <a href="'+url+'" target="_blank">xls</a></nobr>';
        return btn;
    }    
    
    function torg12Formatter(value, row){

        var url = '/print/vtp-torg12/'+row.id;
        btn = '<nobr><a href="'+url+'" target="_blank">pdf</a>';
        url = '/print/vtp-torg12/'+row.id+'?ext=Xls';
        btn += ' <a href="'+url+'" target="_blank">xls</a></nobr>';
        return btn;
    }    

    function dateFormatter(value){
        var date = new Date(value);
        return $.format.date(date, "dd.MM.yyyy");
    }

    function ptuDateFormatter(value, row){
        value = dateFormatter(value);
        if (row.statusDoc === '<?= Vtp::STATUS_DOC_NEW?>' && row.status === '<?= Vtp::STATUS_ACTIVE?>'){
            var diff = dateDiff(row.ptu.docDate);
            var badgeClass = 'badge';
            if (diff > 9){
                badgeClass = 'badge badge-warning';
            }
            if (diff > 11){
                badgeClass = 'badge badge-error';
            }
            return value + ' <span class="'+badgeClass+'">'+diff+'</span>';
        }
        return value;
    }
    
    function infoFormatter(value){
        var result = [];
        var data = $.parseJSON(value);
        if (!$.isEmptyObject(data)){
            $.each( data, function( index, row ) {
                result.push(row.code);
            });               
        }        
        return result.join('<br/>');
    }        
    
    function linkFormatter(value, row){
        return [
            '<nobr>',
            '<a href="#" class="btn btn-link btn-xs supplier-link" supplier-id="'+row.ptu.supplier.id+'" title="Перейти на сайт поставщика">',
            '<span class="glyphicon glyphicon-link"></span></a>',
            '<a href="/supplier/view/' + row.ptu.supplier.id + '" target="_blank">' + value + '</a>',
            '</nobr>'
        ].join(''); 
    }        
    
    function goodFormatter(value, row){
        var url = '/goods/view/'+row.vtpg.good.id;
        btn = '<nobr><a';
        btn += ' href="'+url+'"';
        btn += ' class="btn btn-link btn-xs" target="_blank">';
        btn += '<span class="glyphicon glyphicon-link"></span>';
        btn += '</a>'+value+'</nobr>';
        return btn;
    }    
    
    function responseHandler(res) {
        return res;
    }    
    
    function changeStatus(vtpId, status){
        $.get( "/vtp/status/"+vtpId+'?status='+status, function(data){
            $table.bootstrapTable('updateByUniqueId', {id: vtpId, row: data});
        });        
    }

    function changeStatusDoc(row, statusDoc, docDate){
        $.get( "/vtp/status-doc/"+row.id+'?status='+statusDoc + '&docDate='+docDate, function(data){
            $table.bootstrapTable('updateByUniqueId', {id: row.id, row: data});
        });        
    }
    
    function changeComment(vtpId, comment){
        $.get( "/vtp/comment/"+vtpId+'?comment='+comment, function(data){
            
        });        
    }
    
    function repostEx(vtpId){
        $.get( "/vtp/repost-ex/"+vtpId, function(data){
            $table.bootstrapTable('updateByUniqueId', {id: vtpId, row: data});
        });        
    }
    
    var menu = new BootstrapMenu('.tablerow', {
        fetchElementData: function(rowElem) {
            setCurrentIndex($(rowElem).attr('data-index'));
            return $table.bootstrapTable('getData')[getCurrentIndex()];
        },
        actionsGroups: [
           ['statusActiv', 'statusRetired', 'repostEx'], ['history']
        ],      
        actions: {
            statusDocNew: {
                name: 'Новый',
                onClick: function(row) {
                    changeStatusDoc(row, <?= Vtp::STATUS_DOC_NEW?>);
                },
                isEnabled: function(row) {
                    return row.docDate > '<?= $allowDate?>' && row.statusDoc !== '<?= Vtp::STATUS_DOC_NEW?>' && row.status == <?= Vtp::STATUS_ACTIVE?>;
                }                
            }, 
            statusDocRect: {
                name: 'Отправлен',
                classNames: 'bg-info',
                onClick: function(row) {
                    changeStatusDoc(row, <?= Vtp::STATUS_DOC_RECD?>);
                },
                isEnabled: function(row) {
                    return row.docDate > '<?= $allowDate?>' && row.statusDoc != '<?= Vtp::STATUS_DOC_RECD?>' && row.status == <?= Vtp::STATUS_ACTIVE?>;
                }                
            }, 
            statusDocNotRect: {
                name: 'Принят',
                iconClass: 'glyphicon glyphicon-ok',
                classNames: 'bg-success',
                onClick: function(row) {
                    bootbox.prompt({
                        title: 'Дата принятия возврата поставщиком',
                        inputType: 'date',
                        size: 'small',
                        value: $.format.date(new Date(), "yyyy-MM-dd"),
                        min: (row.ptu.docDate > '<?= $allowDate?>') ? row.ptu.docDate:'<?= $allowDate?>',
                        callback: function (result) {
                            if (result){
                                changeStatusDoc(row, <?= Vtp::STATUS_DOC_NOT_RECD?>, result);
                            }    
                        }
                    });                    
                },
                isEnabled: function(row) {
                    return row.docDate > '<?= $allowDate?>' && row.statusDoc != '<?= Vtp::STATUS_DOC_NOT_RECD?>' && row.status == <?= Vtp::STATUS_ACTIVE?>;
                }                
            }, 
            statusActiv: {
                name: 'Сделать активным',
                iconClass: 'glyphicon glyphicon-ok',
                onClick: function(row) {
                    if (row.statusDoc == <?= Vtp::STATUS_DOC_NOT_RECD?>){
                        bootbox.prompt({
                            title: 'Дата принятия возврата поставщиком',
                            inputType: 'date',
                            size: 'small',
                            value: $.format.date(new Date(row.docDate), "yyyy-MM-dd"),
                            min: (row.ptu.docDate > '<?= $allowDate?>') ? row.ptu.docDate:'<?= $allowDate?>',
                            callback: function (result) {
                                if (result){
                                    changeStatusDoc(row, <?= Vtp::STATUS_DOC_NOT_RECD?>, result);
                                    changeStatus(row.id, <?= Vtp::STATUS_ACTIVE?>);
                                }    
                            }
                        });                                            
                    } else {    
                        changeStatus(row.id, <?= Vtp::STATUS_ACTIVE?>);
                    }    
                },
                isShown: function(row) {
                  return row.status == <?= Vtp::STATUS_RETIRED?>;
                },
                isEnabled: function(row) {
                    return row.docDate > '<?= $allowDate?>';
                }                
            }, 
            statusRetired: {
                name: 'Сделать не активным',
                iconClass: 'glyphicon glyphicon-remove',
//                classNames: 'bg-danger',
                onClick: function(row) {
                    changeStatus(row.id, <?= Vtp::STATUS_RETIRED?>);
                },
                isShown: function(row) {
                  return row.status == <?= Vtp::STATUS_ACTIVE?>;
                },
                isEnabled: function(row) {
                    return row.docDate > '<?= $allowDate?>';
                }                
            },
            repostEx: {
                name: 'Обновить',
                iconClass: 'glyphicon glyphicon-refresh',
//                classNames: 'bg-danger',
                onClick: function(row) {
                    repostEx(row.id);
                },
                isShown: function(row) {
                  return row.status == <?= Vtp::STATUS_ACTIVE?> && row.statusDoc == <?= Vtp::STATUS_DOC_NOT_RECD?>;
                },
                isEnabled: function(row) {
                    return row.docDate > '<?= $allowDate?>';
                }                
            },
            history: {
                name: 'История',
                iconClass: 'glyphicon glyphicon-list-alt',
//                classNames: 'bg-danger',
                onClick: function(row) {
                    $.ajax({
                        type: "GET",
                        url: "/log/history/"+row.id+"?docType=vtp",
                        success: function (result) {
                            bootbox.alert({
                                size: "large",
                                message: result
                            });
                        }
                    });                    
                }
            }
        }
    });    
</script>

