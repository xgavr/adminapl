<?php
use Stock\Entity\Movement;
use Stock\Entity\Register;
use Application\Entity\Order;
use Stock\Entity\Vt;
use Stock\Entity\Vtp;
use Stock\Entity\Ptu;
use Stock\Entity\Pt;
use Stock\Entity\Ot;
use Stock\Entity\St;
use Stock\Entity\Revise;

$this->headTitle('Журнал операций');
$this->mainMenu()->setActiveItemId('stock');
$this->mainMenu()->setActiveUrl($this->url('admin', ['action' => 'transactions']));

$this->pageBreadcrumbs()->setItems([
            'Главная'=>$this->url('home'),
            'Журнал операций'=>$this->url('admin', ['action' => 'transactions']),
            ]);
?>    

<div class="row">
    <div class="col-md-12">
        <div id="toolbar">
            <div class="form-inline" role="form">
<!--                <div class="form-group">
                    <div class="btn-group">
                        <input id="searchinput" name="search" style="width: 150px" class="form-control enter-search" type="text" placeholder="Артикул">
                        <span class="glyphicon glyphicon-remove-circle inputclear"></span>
                    </div>
                    <button id="ok" type="submit" class="btn btn-default" title="Поиск">
                        <span class="glyphicon glyphicon-search"></span>
                    </button>
                </div>-->
                <div class="form-group">
                    <select id="docSelect" style="width: 200px" class="form-control refresh-table cookie-control" name="doc">
                        <option>все типы</option>
                        <?php foreach (Movement::getDocList() as $key=>$value):?>
                            <option value="<?= $key?>"><?= $value?></option>
                        <?php endforeach;?>
                    </select>
                </div>    
                <div class="form-group">
                    <select id="statusSelect" style="width: 200px" class="form-control refresh-table cookie-control" name="status">
                        <option>все статусы</option>
                        <?php foreach (Register::getStatusList() as $key=>$value):?>
                            <option value="<?= $key?>"><?= $value?></option>
                        <?php endforeach;?>
                    </select>
                </div>    
                <div class="form-group">
                    <input id="monthSelect" class="form-control cookie-control" type="month" placeholder="Период" value="<?= date('Y-m');?>">
                </div>
            </div>
        </div>
        <table id="table" 
            data-toggle="table" 
            data-cookie="true"
            data-cookie-id-table="transactionSaveId"
            data-cookie-expire="1m"
            data-side-pagination="server"
            data-pagination="true" 
            data-page-list="[5, 10, 20, 50]"
            data-toolbar="#toolbar"
            data-show-refresh="true"
            data-show-toggle="false"
            data-show-columns="true"
            data-query-params="queryParams"
            data-sort-name="docStamp"
            data-sort-order="desc"            
            data-response-handler="responseHandler"
            data-classes = "table table-bordered table-hover table-condensed"
            data-row-style="rowStyle"
            data-unique-id="id"
            >
            <thead>
                <tr>
                     <!--<th data-field="id" data-type="numeric" data-sortable="true" data-align="right">ID</th>-->
                     <th data-field="id" data-sortable="true" data-width="10">Id</th>
                     <th data-field="dateOper" data-sortable="true" data-width="20" data-formatter="dataFormatter">Дата</th>
                     <th data-field="amount" data-sortable="false" data-width="50" data-align="right" data-formatter="totalFormatter">Сумма</th>
                     <th data-field="doc" data-sortable="false" data-formatter="docFormatter">Документ</th>
                    <!--<th data-field="active" data-formatter="activeFormatter" data-width="10"></th>-->
                 </tr>                
            </thead>
        </table>
    </div>
</div>  

<?php echo $this->partial('/stock/index/stock-partial', []); ?>

<script type="text/javascript">
    var $table = $('#table').bootstrapTable({
        onLoadSuccess: function() {
            setCookies('transactionSaveId');
        }, 
        onExpandRow: function (index, row, $detail) {
            $detail.html('Идет загрузка...');
        }
    });
    
    function setCookies(cookieKey){
        let expires = 30;
        $('.cookie-control').each(function () {
            Cookies.set(cookieKey+'_'+$(this).attr('id'), $(this).val(), { expires: expires});        
        });        
    }
    
    function getCookies(cookieKey){
        $('.cookie-control').each(function () {
            var cookieVal = Cookies.get(cookieKey+'_'+$(this).attr('id'));
            if (cookieVal !== undefined){
                $(this).val(cookieVal);                
            }
        });                        
        $table.bootstrapTable('refresh', {
            url: '/admin/transactions-content'
        });
    }
    
    $(function () {       
        getCookies('transactionSaveId');
        
        $(".inputclear").click(function(){
            $("#searchinput").val('');
            $table.bootstrapTable('refresh');
        });

        $('#ok').click(function () {
            $table.bootstrapTable('refresh');
        });
        
        $(document).on('change', '.refresh-table', function (e) {
            $table.bootstrapTable('refresh');
        });
        
    });
    
    function queryParams(params) {
        $('#toolbar').find('input[name]').each(function () {
            params[$(this).attr('name')] = $(this).val();
        });
        $('#toolbar').find('select[name]').each(function () {
            params[$(this).attr('name')] = $(this).val();
        });
        limit = $('#table .page-size').html();
        if (limit){
            params.limit = limit;
        }    
        offset = $('#table li.page-number.active a').html();
        if (offset){
            params.offset = params.limit * (offset - 1);
        }    
        params.month = $('#monthSelect').val();
        return params;
    }

    function rowStyle(row){
        var retired = 'tablerow';
        switch(row.docType){
            case '<?= Movement::DOC_ORDER?>': 
                if (row.order.statusAccount == <?= Order::STATUS_TAKE_NO?>){
                    return {classes: 'warning '+retired}; break;
                }
                switch(row.order.status){
                    case '<?= Order::STATUS_DELIVERY?>': 
                                return {classes: 'info '+retired}; break;
                    case '<?= Order::STATUS_CONFIRMED?>': 
                                return {classes: 'default '+retired}; break;
                    case '<?= Order::STATUS_CANCELED?>': 
                                return {classes: 'retired '+retired}; break;
                    default:break;     
                }; break;
            case '<?= Movement::DOC_VT?>': 
                if (row.vt.statusAccount == <?= Vt::STATUS_TAKE_NO?>){
                    return {classes: 'warning '+retired}; break;
                }
                switch(row.vt.status){
                    case '<?= Vt::STATUS_RETIRED?>': 
                        return {classes: 'retired '+retired}; break;
                    case '<?= Vt::STATUS_COMMISSION?>': 
                    case '<?= Vt::STATUS_DEFECT?>': 
                    case '<?= Vt::STATUS_WAIT?>': 
                        return {classes: 'info '+retired}; break;
                    default:break;     
                }; break;
            case '<?= Movement::DOC_PTU?>': 
                switch(row.ptu.status){
                    case '<?= Ptu::STATUS_RETIRED?>': 
                        return {classes: 'retired '+retired}; break;
                    default:break;     
                }; break;
            case '<?= Movement::DOC_OT?>': 
                switch(row.ot.status){
                    case '<?= Ot::STATUS_RETIRED?>': 
                        return {classes: 'retired '+retired}; break;
                    case '<?= Ot::STATUS_COMMISSION?>': 
                        return {classes: 'info '+retired}; break;
                    default:break;     
                }; break;
            case '<?= Movement::DOC_PT?>': 
                if (row.pt.statusAccount == <?= Pt::STATUS_TAKE_NO?>){
                    return {classes: 'warning '+retired}; break;
                }
                switch(row.pt.status){
                    case '<?= Pt::STATUS_RETIRED?>': 
                        return {classes: 'retired '+retired}; break;
                    default:break;     
                }; break;
            case '<?= Movement::DOC_ST?>': 
                if (row.st.statusAccount == <?= St::STATUS_TAKE_NO?>){
                    return {classes: 'warning '+retired}; break;
                }
                switch(row.st.status){
                    case '<?= St::STATUS_RETIRED?>': 
                        return {classes: 'retired '+retired}; break;
                    default:break;     
                }; break;
            case '<?= Movement::DOC_VTP?>': 
                if (row.vtp.statusAccount == <?= Vtp::STATUS_TAKE_NO?>){
                    return {classes: 'warning '+retired}; break;
                }
                switch(row.vtp.status){
                    case '<?= Vtp::STATUS_RETIRED?>': 
                        return {classes: 'retired '+retired}; break;
                    default:break;     
                }; break;
            case '<?= Movement::DOC_REVISE?>': 
                switch(row.revise.status){
                    case '<?= Revise::STATUS_RETIRED?>': 
                        return {classes: 'retired '+retired}; break;
                    default:break;     
                }; break;
            default: return 0;            
        }        
        return {classes: retired};
    }
    
    function typeFormatter(docType, docId, docKey){
        switch(docType){
            case '<?= Movement::DOC_ORDER?>': 
//                        return "<a href='/order/intro/"+docId+"' target='_blank'>Заказ №"+docId+"</a>";
                        return "<a href='#' class='order-view-show' modal-url='/order/view/"+docId+"'>Заказ №"+docId+"</a>";
            case '<?= Movement::DOC_VT?>': 
                        return "<a href='#' class='vt-modal-show' modal-url='/vt/edit-form/"+docId+"'>Возврат покупателя №"+docId+"</a>";
            case '<?= Movement::DOC_PTU?>': 
                        return "<a href='#' class='ptu-modal-show' modal-url='/ptu/edit-form/"+docId+"'>Поступление №"+docId+"</a>";
            case '<?= Movement::DOC_OT?>': 
                        return "<a href='#' class='ot-modal-show' modal-url='/ot/edit-form/"+docId+"'>Оприходование №"+docId+"</a>";
            case '<?= Movement::DOC_PT?>': 
                        return "<a href='#' class='pt-modal-show' modal-url='/pt/edit-form/"+docId+"'>Перемещение №"+docId+"</a>";
            case '<?= Movement::DOC_ST?>': 
                        return "<a href='#' class='st-modal-show' modal-url='/st/edit-form/"+docId+"'>Списание №"+docId+"</a>";
            case '<?= Movement::DOC_VTP?>': 
                        return "<a href='#' class='vtp-modal-show' modal-url='/vtp/edit-form/"+docId+"'>Возврат поставщику №"+docId+"</a>";
            default: return docKey;            
        }
    }
        
    function docFormatter(value, row){
        return typeFormatter(row.docType, row.docId, value);
    }

    function dataFormatter(value){
        return '<nobr>'+$.format.date(value, "dd.MM.yy")+'</nobr>';        
    }
    
    
    function totalFormatter(value, row){
        switch(row.docType){
            case '<?= Movement::DOC_ORDER?>': 
                    return (Math.round(row.order.total*100)/100).toFixed(2);
            case '<?= Movement::DOC_VT?>': 
                    return (Math.round(row.vt.amount*100)/100).toFixed(2);
            case '<?= Movement::DOC_PTU?>': 
                    return (Math.round(row.ptu.amount*100)/100).toFixed(2);
            case '<?= Movement::DOC_OT?>': 
                    return (Math.round(row.ot.amount*100)/100).toFixed(2);
            case '<?= Movement::DOC_PT?>': 
                    return (Math.round(row.pt.amount*100)/100).toFixed(2);
            case '<?= Movement::DOC_ST?>': 
                    return (Math.round(row.st.amount*100)/100).toFixed(2);
            case '<?= Movement::DOC_VTP?>': 
                    return (Math.round(row.vtp.amount*100)/100).toFixed(2);
            case '<?= Movement::DOC_REVISE?>': 
                    return (Math.round(row.revise.amount*100)/100).toFixed(2);
            default: return 0;            
        }
    }
    
    function activeFormatter(value, row){
        var url = '<?= $this->url('order', ['action' => 'intro'])?>/'+value;
        btn = '<a';
        btn += ' type="button"';
        btn += ' href="'+url+'"';
        btn += ' target="_blamk"';
        btn += ' class="btn btn-default btn-xs"';
        btn += ' aria-label="Left Align">'; 
        btn += '<span class="glyphicon glyphicon-edit" aria-hidden="true"></span>';
        btn += '</a>';

        return btn;
    }    
    
    function responseHandler(res) {
        return res;
    }    
    
    function repostDoc(registerId){
        var dialog = bootbox.dialog({
            message: '<p class="text-center"><i class="fa fa-spin fa-spinner"></i>Подождите, пока мы что-нибудь сделаем ...</p>',
            closeButton: false
        });
        $.get( "/admin/repost-doc/"+registerId, function(data){
            $table.bootstrapTable('updateByUniqueId', {id: registerId, row: data});
            dialog.modal('hide');
        });        
    }
    
    var menu = new BootstrapMenu('.tablerow', {
        fetchElementData: function(rowElem) {
            var rowId = $(rowElem).attr('data-index');
            return $table.bootstrapTable('getData')[rowId];
        },
        actionsGroups: [
            ['history']
        ],      
        actions: {
            repost: {
                name: 'Обновить',
                iconClass: 'glyphicon glyphicon-refresh',
                onClick: function (row){
                    repostDoc(row.id);
                },
                isEnabled: function(row) {
                    switch(row.docType){
                        case '<?= Movement::DOC_ORDER?>': 
                                return row.order.status == <?= Order::STATUS_SHIPPED?>;
                        case '<?= Movement::DOC_VT?>': 
                                return row.vt.status == <?= Vt::STATUS_ACTIVE?>;
                        case '<?= Movement::DOC_PT?>': 
                                return row.pt.status == <?= Pt::STATUS_ACTIVE?>;
                        case '<?= Movement::DOC_ST?>': 
                                return row.st.status == <?= St::STATUS_ACTIVE?>;
                        case '<?= Movement::DOC_VTP?>': 
                                return row.vtp.status == <?= Vtp::STATUS_ACTIVE?> && row.vtp.statusDoc == <?= Vtp::STATUS_DOC_NOT_RECD?>;
                        default: return false;            
                    }
                }                
            },
            history: {
                name: 'История',
                iconClass: 'glyphicon glyphicon-list-alt',
//                classNames: 'bg-danger',
                onClick: function(row) {
                    $.ajax({
                        type: "GET",
                        url: "/log/history/"+row.docId+"?docType="+row.docType,
                        success: function (result) {
                            bootbox.alert({
                                size: "large",
                                message: result
                            });
                        }
                    });                    
                }
            }
        }
    });    
    
</script>

